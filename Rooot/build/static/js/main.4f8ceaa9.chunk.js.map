{"version":3,"sources":["axios.js","Requests.js","Banner.js","Nav.js","Row.js","Screens/HomeScreen.js","firebase.js","Screens/SignupScreen.js","Screens/LoginScreen.js","features/counter/userSlice.js","Screens/ProfileScreen.js","App.js","app/store.js","serviceWorker.js","index.js"],"names":["instance","axios","create","baseURL","API_KEY","requests","fetchTrending","fetchNetflixOriginals","fetchTopRated","fetchActionMovies","fetchComdeynMovies","fetchHorrorMovies","fetchRomanceMovies","fetchDocumentaries","Banner","string","n","useState","movie","setMovie","useEffect","a","get","request","data","results","Math","floor","random","length","fetchData","console","log","className","style","backgroundSize","backgroundImage","backdrop_path","backgroundPosition","title","name","original_name","overview","substr","Nav","show","handleShow","history","useHistory","transitionNavBar","window","scrollY","addEventListener","onClick","push","src","alt","Row","fetchUrl","isLargeRow","movies","setMovies","trailerUrl","setTrailerURL","map","movieTrailer","then","url","urlParams","URLSearchParams","URL","search","catch","error","handleClick","poster_path","id","videoId","opts","height","width","playerVars","autoplay","HomeScreen","auth","firebase","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","firestore","SignupScreen","emailRef","useRef","passwordRef","ref","placeholder","type","e","preventDefault","signInWithEmailAndPassword","current","value","authUser","alert","message","createUserWithEmailAndPassword","LoginScreen","signIn","setSignIn","userSlice","createSlice","initialState","user","reducers","login","state","action","payload","logout","actions","selectUser","ProfileScreen","useSelector","email","signOut","App","dispatch","useDispatch","onAuthStateChanged","userAuth","uid","path","exact","store","configureStore","reducer","userReducer","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.4f8ceaa9.chunk.js","sourcesContent":["import axios from 'axios';\r\nconst instance = axios.create({\r\n    baseURL:\"https://api.themoviedb.org/3\"\r\n})\r\n\r\nexport default instance;","const API_KEY=\"fb89453090d349caf32b362a88969e75\";\r\n\r\nconst requests = {\r\n    fetchTrending: `/trending/all/week?api_key=${API_KEY} & language=en-US`,\r\n    fetchNetflixOriginals:`/discover/tv?api_key=${API_KEY}&with_networks=213`,\r\n    fetchTopRated:`/movie/top_rated?api_key=${API_KEY}&language=en-US`,\r\n    fetchActionMovies:`/discover/movie?api_key=${API_KEY}&with_genres=28`,\r\n    fetchComdeynMovies:`/discover/movie?api_key=${API_KEY}&with_genres=35`,\r\n    fetchHorrorMovies:`/discover/movie?api_key=${API_KEY}&with_genres=27`,\r\n    fetchRomanceMovies:`/discover/movie?api_key=${API_KEY}&with_genres=10749`,\r\n    fetchDocumentaries:`/discover/movie?api_key=${API_KEY}&with_genres=99`,\r\n};\r\n\r\nexport default requests;","import axios from './axios';\r\nimport React, { useEffect, useState } from 'react';\r\nimport \"./Banner.css\";\r\nimport requests from \"./Requests\";\r\n\r\nfunction Banner() {\r\n    // movie requests, changes whenever u refresh how ? the request give a random nbr btwn 1 and the max nbr and that's the nbr of the movie shown \r\n    const[movie,setMovie]= useState([]);\r\n    useEffect(()=>{\r\n        async function fetchData(){\r\n            const request = await axios.get(requests.fetchNetflixOriginals);\r\n            setMovie(\r\n                request.data.results[\r\n                    Math.floor(Math.random()*request.data.results.length-1)\r\n                ]\r\n            );\r\n            return request;\r\n        }\r\n        fetchData();\r\n    },[]);\r\n\r\n    console.log(movie);\r\n\r\n    // ... when the description is too long\r\n    function truncate(string,n){\r\n      return string?.length > n ? string.substr(0,n-1)+'...' : string\r\n    }\r\n    return (<header className=\"banner\" \r\n    style={{\r\n    backgroundSize:\"Cover\",\r\n    backgroundImage: `url(\"https://image.tmdb.org/t/p/original/${movie?.backdrop_path}\")`,\r\n    backgroundPosition:\"center center\",\r\n    }}>\r\n    <div className=\"banner_contents\">\r\n        <h1 className=\"banner_title\"> \r\n        {movie?.title || movie?.name || movie?.original_name} \r\n        </h1>\r\n        <div className=\"banner_buttons\">\r\n            <button className=\"banner_button\"> Play </button>\r\n            <button className=\"banner_button\"> My list </button>\r\n            </div> \r\n    <h1 className=\"banner_description\">{truncate(movie?.overview,150)}</h1>\r\n    </div>\r\n    <div className=\"banner--fadeBottom\"/>\r\n    </header>\r\n    );\r\n}\r\n\r\nexport default Banner;\r\n","import React, { useEffect, useState } from 'react';\r\nimport \"./Nav.css\";\r\nimport {useHistory} from \"react-router-dom\";\r\nfunction Nav() {\r\n    const [show, handleShow] =useState(false);\r\n    const history = useHistory();\r\n\r\n    const transitionNavBar =  () =>{\r\n        if( window.scrollY > 100){\r\n            handleShow(true);\r\n        }\r\n        else{\r\n            handleShow(false); \r\n        }\r\n    };\r\n    useEffect(() =>{\r\n        //as we scroll it's gonna trigger the navbar\r\n    window.addEventListener(\"scroll\",transitionNavBar);\r\n    return()=> window.addEventListener(\"scroll\",transitionNavBar);\r\n    },[]);\r\n    return ( \r\n        //only add the nav black if the show variable is true\r\n    <div className={`nav ${show && 'nav_black'}`}>\r\n           <div className=\"nav_contents\">\r\n             <img \r\n             // I can click on the netflix icon to go to the main page\r\n             onClick={()=> history.push(\"/\")}\r\n             className='nav_logo'\r\n             src=\"http://assets.stickpng.com/images/580b57fcd9996e24bc43c529.png\" \r\n             alt=\"\"\r\n             />\r\n             <img  \r\n             onClick={()=> history.push(\"/profile\")}\r\n             className='nav_avatar'\r\n             src=\"https://upload.wikimedia.org/wikipedia/commons/0/0b/Netflix-avatar.png\" \r\n             alt=\"\" \r\n             />\r\n            \r\n            </div>\r\n    </div>\r\n    );\r\n}\r\n\r\nexport default Nav;\r\n\r\n","import axios from './axios';\r\nimport React, { useEffect, useState } from 'react';\r\nimport \"./Row.css\";\r\nimport Youtube from \"react-youtube\";\r\nimport movieTrailer from \"movie-trailer\";\r\n\r\nfunction Row({title,fetchUrl, isLargeRow=false}) {\r\n    const [movies, setMovies]=useState([]);\r\n    const [trailerUrl, setTrailerURL]=useState(\"\");\r\n    const base_url = \"https://image.tmdb.org/t/p/original/\";\r\n    useEffect(()=> {\r\n    async function fetchData(){\r\n        const request = await axios.get(fetchUrl);\r\n        setMovies(request.data.results);\r\n        return request;\r\n    }\r\n    fetchData();\r\n    },[fetchUrl]);\r\n\r\n const opts = {\r\n     height:\"390\",\r\n     width:\"100%\",\r\n     playerVars:{\r\n     autoplay:1, \r\n     },\r\n };\r\n const handleClick = (movie) =>{\r\nif(trailerUrl){\r\n    setTrailerURL(\"\");\r\n}\r\nelse{\r\n    movieTrailer(movie?.title || movie?.name || \"\")\r\n    .then((url )=> {\r\n        const urlParams = new URLSearchParams (new URL(url).search);\r\n        setTrailerURL(urlParams.get('v')); // to only get the v value part of the url\r\n      \r\n      })\r\n      .catch((error) => console.log(error)); \r\n}\r\n };\r\n\r\n\r\n    return (\r\n    <div className=\"row\">\r\n        <h2> {title} </h2>\r\n       <div className=\"row_posters\">\r\n           \r\n        {movies.map((movie) => (\r\n            <img \r\n            key={movie.id}\r\n            onClick = {() => handleClick(movie)}\r\n            className={`row_poster ${isLargeRow && \"row_posterLarge\"}`}\r\n            src={`${base_url}${isLargeRow ? movie.poster_path : movie.backdrop_path }`} \r\n            alt={movie.name}\r\n            /> //for evert single movie we'll retrun an image ( of the film concerned )\r\n        ))}\r\n        </div> \r\n        {/* when we have the trailer url -> show the ytb video */}\r\n       {trailerUrl && <Youtube videoId={trailerUrl} opts={opts}/>}\r\n    </div>\r\n    );\r\n}\r\n\r\nexport default Row;","import React from 'react';\r\nimport Banner from '../Banner';\r\nimport \"./HomeScreen.css\";\r\nimport Nav from '../Nav';\r\nimport requests from '../Requests';\r\nimport Row from \"../Row\";\r\n\r\nfunction HomeScreen() {\r\n    return (\r\n    <div className=\"homeScreen\">\r\n        <Nav/>\r\n        <Banner/>\r\n\r\n        <Row\r\n        title ='NETFLIX ORIGINALS'\r\n        fetchUrl={requests.fetchNetflixOriginals}\r\n        isLargeRow\r\n        />\r\n      \r\n        \r\n      <Row\r\n             title ='Trending Now' \r\n             fetchUrl={requests.fetchTrending}\r\n             isLargeRow\r\n             />\r\n        <Row\r\n             title ='Top Rated'\r\n             fetchUrl={requests.fetchTopRated}\r\n             isLargeRow/>\r\n        <Row      title ='Action Movies '\r\n        fetchUrl={requests.fetchActionMovies}\r\n        isLargeRow\r\n        />\r\n        <Row      title ='Comedy Movies '\r\n        fetchUrl={requests.fetchComdeynMovies}\r\n        isLargeRow\r\n        />\r\n           <Row      title ='Horror Movies '\r\n        fetchUrl={requests.fetchHorrorMovies}\r\n        isLargeRow\r\n        />\r\n           <Row      title ='Romance Movies '\r\n        fetchUrl={requests.fetchRomanceMovies}\r\n        isLargeRow\r\n        />\r\n           <Row      title ='Documentaries '\r\n        fetchUrl={requests.fetchDocumentaries}\r\n        isLargeRow\r\n        />\r\n\r\n      \r\n    </div>\r\n    );\r\n}\r\n\r\nexport default HomeScreen;\r\n","import firebase from 'firebase';\r\n\r\n\r\nconst firebaseConfig = {\r\n  apiKey: \"AIzaSyCL2vwDCGHOug43WzEMYtisHqK188DFpbs\",\r\n  authDomain: \"netflix-clone-build-2d7d8.firebaseapp.com\",\r\n  projectId: \"netflix-clone-build-2d7d8\",\r\n  storageBucket: \"netflix-clone-build-2d7d8.appspot.com\",\r\n  messagingSenderId: \"731815724877\",\r\n  appId: \"1:731815724877:web:7022613c87d90760769904\"\r\n};\r\n\r\n  const firebaseApp = firebase.initializeApp(firebaseConfig);\r\n  const db= firebaseApp.firestore();\r\n  const auth = firebase.auth();\r\n\r\n  export{ auth };\r\n  export default db;","import React, { useRef } from 'react';\r\nimport { auth } from '../firebase';\r\n\r\n\r\nimport './SignupScreen.css';\r\n\r\nfunction SignupScreen() {\r\n    const emailRef = useRef(null);\r\n    const passwordRef = useRef(null);\r\n{/* Authentification  */}\r\n\r\nconst register =(e) =>{\r\n    e.preventDefault();  {/* Preventing the button from refreshing the page which is a default behavior */}\r\n    auth\r\n    .createUserWithEmailAndPassword(\r\n        emailRef.current.value,\r\n        passwordRef.current.value\r\n        )\r\n        .then((authUser) => {\r\n            console.log(authUser);\r\n        })\r\n        .catch((error) => {\r\n        alert(error.message);\r\n    });\r\n\r\n};\r\nconst signIn= (e) => {\r\n    e.preventDefault();  \r\n\r\n    auth\r\n    .signInWithEmailAndPassword(\r\n        emailRef.current.value,\r\n        passwordRef.current.value\r\n    )\r\n    .then((authUser)=>{\r\n        console.log(authUser);\r\n    })\r\n    .catch((error)=> alert(error.message));\r\n\r\n};\r\n    return (\r\n        <div className= \"signupScreen\">\r\n            <form>\r\n                <h1>Sign In</h1>\r\n                <input ref={emailRef} placeholder=\"Email\" type=\"email\"/>\r\n                <input ref={passwordRef}  placeholder=\"Password\" type=\"password\"/>\r\n                 <button type=\"submit\" onClick = {signIn} >Sign In </button>\r\n               <h4><span className=\"signupScreen_gray\">New to Netflix ? </span>\r\n                <span className=\"signupScreen_link\" onClick={register}> \r\n                Sign Up now. </span></h4>\r\n            </form>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default SignupScreen;\r\n","import React, { useState } from 'react';\r\nimport './LoginScreen.css';\r\nimport SignupScreen from './SignupScreen';\r\n\r\n\r\nfunction LoginScreen() {\r\n    const [signIn, setSignIn]= useState(false);\r\n    return (\r\n        <div className=\"loginScreen\">\r\n          <div className=\"loginScreen_background\">\r\n              <img \r\n              className=\"loginScreen_logo\"\r\n              src=\"http://assets.stickpng.com/images/580b57fcd9996e24bc43c529.png\"\r\n              alt=\"\"\r\n              />\r\n              <button onClick={()=> setSignIn(true)}\r\n              className=\"loginScreen_button\" >Sign In</button>\r\n             \r\n             <div className=\"loginScreen_gradient\"/> \r\n             </div> \r\n              \r\n              <div className=\"loginScreen_body\">\r\n                  \r\n             {/* Show the sign in page when clicking on get started */}\r\n              {signIn?\r\n              (\r\n                <SignupScreen/>\r\n              ):(\r\n              <>\r\n                <h1>  Unlimited films, TV programmes and more. </h1>\r\n                <h2>  Watch anywhere. Cancel at any time </h2>\r\n                <h3>   Ready to watch ? Enter your email to create or restart your membership </h3>\r\n               <div className=\"loginScreen_input\">\r\n               <form>\r\n                   <input type=\"email\" placeholder=\"Email Adress\"/>\r\n               <button onClick={()=> setSignIn(true)}\r\n               className='loginScreen_getStarted'>\r\n                   GET STARTED \r\n               </button>\r\n               </form>\r\n  \r\n               </div>\r\n               </>\r\n              )}\r\n              \r\n            \r\n              </div>\r\n        </div>\r\n    \r\n    );\r\n}\r\n\r\nexport default LoginScreen;\r\n\r\n\r\n","import { createSlice } from '@reduxjs/toolkit';\n\n\n\n\nexport const userSlice = createSlice({\n  name: \"user\",\n  initialState:{\n    user:null,\n  },\n reducers:{\n  login:(state, action) => {\n    state.user = action.payload;\n\n  },\n  logout:(state) => {\n    state.user=null;\n  },\n},\n});\n\nexport const { login, logout } = userSlice.actions;\n\nexport const selectUser = (state) => state.user.user;\n\n\n\nexport default userSlice.reducer;\n","import React from 'react';\r\nimport Nav from \"../Nav\";\r\nimport \"./ProfileScreen.css\";\r\nimport {useSelector} from \"react-redux\";\r\nimport {selectUser} from \"../features/counter/userSlice\";\r\nimport { auth } from '../firebase';\r\nfunction ProfileScreen() \r\n{\r\n  const user = useSelector(selectUser);\r\n    return ( \r\n    <div className=\"profileScreen\">\r\n   {/* just so I can use the nav bar \"Netflix\" */}\r\n    <Nav/>\r\n    \r\n    <div className=\"profileScreen_body\">\r\n     <h1>Edit Profile</h1>\r\n     <div className=\"profileScreen_info\">\r\n         <img \r\n         src=\"https://upload.wikimedia.org/wikipedia/commons/0/0b/Netflix-avatar.png\"\r\n         alt=\"\"\r\n         />\r\n         <div className=\"profileScreen_details\">\r\n             <h2>{user.email}</h2>\r\n         <div className=\"profileScreen_plans\">\r\n             <button onClick={()=> auth.signOut()} className =\"profileScreen_signOut\"> Sign Out </button>\r\n         </div>\r\n         \r\n         </div>\r\n     </div>\r\n    </div>\r\n    \r\n    </div>\r\n    );\r\n}\r\n\r\nexport default ProfileScreen;\r\n\r\n","import React, { useEffect } from 'react';\nimport './App.css';\n\nimport HomeScreen from \"./Screens/HomeScreen\";\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route\n\n} from \"react-router-dom\";\nimport LoginScreen from \"./Screens/LoginScreen\"\nimport { auth } from './firebase';\nimport { useDispatch, useSelector } from \"react-redux\"; \nimport{login,logout,selectUser} from \"./features/counter/userSlice\"\nimport ProfileScreen from \"./Screens/ProfileScreen\";\n\nfunction App() {\n  const user = useSelector(selectUser);\n  const dispatch = useDispatch();\n\n\n  //listens to the user's logged in state\n  useEffect(()=>{\n    const unsubscribe = auth.onAuthStateChanged((userAuth )=>{\n      if(userAuth){\n     \n      dispatch( login ({\n        uid: userAuth.uid,\n        email: userAuth.email,\n      })\n      );\n    }\n    else{\n       dispatch(logout());\n    }\n\n  \n  });\n  return unsubscribe;\n}, [dispatch]);\n  return (\n    <div className=\"app\">\n     \n       <Router>\n         {!user ?(\n\n         \n     <LoginScreen/>\n         ) : (\n        <Switch>\n         <Route path='/profile'>\n          <ProfileScreen/>\n         </Route>\n         \n          <Route exact path=\"/\">\n        \n          <HomeScreen/>\n          </Route>\n        </Switch>\n         )}\n    </Router>\n    </div>\n  );\n}\n\nexport default App;\n","import { configureStore } from '@reduxjs/toolkit';\nimport userReducer, { userSlice } from \"../features/counter/userSlice\";\n\nexport const store = configureStore({\n  reducer: {\n    user: userReducer,\n  },\n});\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { store } from './app/store';\nimport { Provider } from 'react-redux';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}